from scipy import interpolate
import numpy as np
#FIXME: missing vcma and write 

J_lut = np.linspace(-6e9,6e9,41)

energy_avg_she = [1.69582669e-13, 1.67630107e-13, 1.65783163e-13, 1.64035376e-13,
 1.62381433e-13, 1.60831510e-13, 1.59382467e-13, 1.58028616e-13,
 1.56772018e-13, 1.55617286e-13, 1.54556390e-13, 1.53590236e-13,
 1.52716905e-13, 1.51939687e-13, 1.51255043e-13, 1.50664055e-13,
 1.50171533e-13, 1.49778345e-13, 1.49489403e-13, 1.49311076e-13,
 1.49250377e-13, 1.49313588e-13, 1.49509741e-13, 1.49845709e-13,
 1.50328625e-13, 1.50963939e-13, 1.51758886e-13, 1.52711291e-13,
 1.53831460e-13, 1.55115592e-13, 1.56563750e-13, 1.58172363e-13,
 1.59953033e-13, 1.61896167e-13, 1.63999656e-13, 1.66261254e-13,
 1.68691930e-13, 1.71276488e-13, 1.74027941e-13, 1.76940064e-13,
 1.80010079e-13]

bit_avg_she = [9.99105e-01, 9.98360e-01, 9.97475e-01, 9.96170e-01, 9.93635e-01, 9.89935e-01,
    9.84885e-01, 9.78295e-01, 9.68750e-01, 9.56170e-01, 9.39425e-01, 9.20085e-01,
    8.92535e-01, 8.60480e-01, 8.21865e-01, 7.78710e-01, 7.33545e-01, 6.78290e-01,
    6.21895e-01, 5.62025e-01, 5.01395e-01, 4.39310e-01, 3.79450e-01, 3.22725e-01,
    2.69530e-01, 2.17580e-01, 1.76170e-01, 1.38400e-01, 1.07065e-01, 8.08900e-02,
    5.98750e-02, 4.41350e-02, 3.16700e-02, 2.22750e-02, 1.47200e-02, 9.44500e-03,
    6.08000e-03, 4.18500e-03, 2.45000e-03, 1.64500e-03, 9.20000e-04]

bit_avg_vcma = [0.999995, 0.999995, 0.9999750000000001, 0.9999350000000001, 0.9998500000000001, 0.9996750000000002,
 0.9993200000000002, 0.998575, 0.9967399999999997, 0.9941299999999998, 0.988425, 0.9793549999999998,
 0.96523, 0.9438449999999999, 0.912645, 0.8703350000000001, 0.8189249999999999, 0.75329, 0.6735649999999999,
 0.589635, 0.49924999999999997, 0.41176499999999994, 0.323015, 0.24708999999999998, 0.182275, 0.13015, 0.085885,
 0.056255, 0.03487, 0.020659999999999998, 0.0113, 0.0060750000000000005, 0.00306, 0.0016149999999999997,
 0.0007500000000000002, 0.00033, 9.5e-05, 7.500000000000001e-05, 3.0000000000000004e-05, 5e-06, 5e-06]

energy_avg_vcma = [4.5654204712453536e-14, 4.125670410882806e-14, 3.7081107799407894e-14, 3.3124924289176136e-14,
 2.9390367856257544e-14, 2.5876077933948243e-14, 2.258291882979718e-14, 1.9512614562139135e-14,
 1.6665674835557327e-14, 1.4041133398856185e-14, 1.164431303062378e-14, 9.471623714676163e-15,
 7.522196947267414e-15, 5.797851586480901e-15, 4.295560814175367e-15, 3.0145502817264004e-15,
 1.9527521137148794e-15, 1.1144919644677391e-15, 5.037392267569622e-16, 1.2817276512859494e-16,
 2.6051105875747128e-24, 1.3295762190970325e-16, 5.418380880731363e-16, 1.2393503253338154e-15,
 2.2362526706721725e-15, 3.5391832664729566e-15, 5.156304498604529e-15, 7.082359278824152e-15,
 9.322291741061216e-15, 1.1872660183398066e-14, 1.4736741271475984e-14, 1.7907668063384043e-14,
 2.1389620172930623e-14, 2.5183402126243404e-14, 2.929091159163603e-14, 3.371176554769616e-14,
 3.844943044724978e-14, 4.349935434215015e-14, 4.886665745718449e-14, 5.4548934231674445e-14, 6.054921294525308e-14]

Jwrite = np.linspace(-3e11,0,41)
bit_avg_write = [0.9832000001060751, 0.983500000105962, 0.9811000001058701, 0.9738000001057657, 0.970400000105673, 0.9634000001056001, 0.9590000001055112, 0.9553000001054286, 0.9510000001053406, 0.9393000001052692, 0.9315000001052114, 0.9166000001051711, 0.9075000001051112, 0.8923000001050552, 0.8739000001050202, 0.8554000001049795, 0.8350000001049528, 0.8052000001049466, 0.7703000001049554, 0.7372000001049639, 0.6878000001049968, 0.6488000001050052, 0.59170000010508, 0.5231000001051507, 0.46060000010521723, 0.39340000010528436, 0.30970000010538307, 0.236600000105447, 0.17000000010552088, 0.11470000010555843, 0.06650000010558192, 0.03620000010558292, 0.015400000105574876, 0.008700000105553192, 0.0019000001055321334, 0.0008000001055095002, 0.00010000010549033213, 1.0547540093969187e-10, 1.0546418358903243e-10, 1.0545756171514987e-10, 1.0545521364688226e-10]

def jz_lut_she(weight):
    if weight > 0.9988:
        return -6.6e9
    elif weight < 0.002:
        return 6.6e9
    else:
        f = interpolate.interp1d(bit_avg_she, J_lut)
        return f(weight)

def energy_she(weight):
    if weight > 0.9988:
        return 1.9e-13
    elif weight < 0.002:
        return 1.9e-13
    else:
        f = interpolate.interp1d(bit_avg_she, energy_avg_she)
        return f(weight)

def jz_lut_vcma(weight):
    f = interpolate.interp1d(bit_avg_vcma, J_lut)
    return f(weight)

def energy_vcma(weight):
    f = interpolate.interp1d(bit_avg_vcma, energy_avg_vcma)
    return f(weight)

def jz_lut_write(weight):
    if weight > 0.988:
        return -4e11
    else:
        f = interpolate.interp1d(bit_avg_write, Jwrite)
        return f(weight)

        return f(weight)

def energy_write(weight):
    if weight > 0.988:
        return 3.4e-12
    else:
        f = interpolate.interp1d(bit_avg_write, energy_avg_write)
        return f(weight)
